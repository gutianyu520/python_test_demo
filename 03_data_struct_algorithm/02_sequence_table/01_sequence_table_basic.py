# -*- coding: utf-8 -*-
# @Time : 2021/02/09 16:50
# @Author : Lim Yoona
# @Site : 
# @File : 01_sequence_table_basic.py
# @Software: PyCharm

"""
    顺序表
"""
"""
    线性表：将一组元素看成一个序列，通过序列表示元素中的位置和顺序，而这样的序列元素可以将其抽象成线性表
    线性表是一组元素的集合，也记录着元素的顺序等信息
    
    线性表是最基本的数据结构之一
    
    存储形式：
        顺序表：将元素顺序地存放在一个连续的存储区间，元素间的顺序关系由它们的存储顺序自然表示
        链表：将元素存放在通过链接构造起来的一系列存储块中。
"""

"""
    顺序表：
        基本形式：
            基本布局：数据元素本身连续存储，每个元素所占用相同大小且固定的存储单元，元素的下标就是逻辑地址，物理地址（实际内存地址）
                物理地址计算规则：Loc(ei) = Loc(e0) + c*i    (i是下标)
                时间复杂度：O(1)
                优点:访问元素无需从头开始，可以通过下标指定，获得其对应的物理地址
            元素外置布局（元素大小不统一）：顺序表中存储的是各个元素的地址信息
                由于所占用实际内存很小，因此外置元素的顺序表也称作对实际数据的索引，这是最简单的索引结构。
                
        结构：元素集合 + 表的整理情况信息（容量 + 现有元素个数）
        
        基本表现方式：
            一体式结构：存储表的信息单元和元素存储区以连续的方式安排在一起，形成完整的顺序表对象
                优点：整体性强，易于管理
                缺点：存储去固定，无法进行扩容，存储数量有限
            分离式结构：表对象中只存储与整个表相关的信息（容量+个数），实际元素存储在另一块独立的存储区，通过链接实现与表对象关系
        
        元素存储区替换：
            一体式：整个搬迁，整个表对象都改变了
            分离式：只更新表的链接信息即可
        
        元素存储区扩充（扩充策略）：
            每次增加固定数目的存储位置（线性增长）：
                特点：节省空间，扩充操作频繁，操作次数多
            每次扩容加倍（指数增长）：
                特点：减少扩充次数，可能会浪费空间，以空间换时间（推荐）
        
        操作：
            增加元素：
                尾部增加元素：时间复杂度O(1)
                非保序加入元素（不常见）：时间复杂度O(1)
                保序元素加入：时间复杂度O(n)
            
            删除元素：
                删除尾部元素：时间复杂度O(1)
                非保序元素删除（不常见）：时间复杂度O(1)
                保序元素删除：时间复杂度O(n)
"""

"""
    顺序实现：   
        list：元素个数可变的线性表
            可以添加和删除
            特征：
                1.基于下标的高效元素访问和更新（时间复杂度O(1)）,表中元素存放在连续空间中
                2.允许任意增加元素，增加过程中，表对象本身不会发生变化（分离式）
        
            list是一个采用分离式技术实现的动态顺序表，插入元素的方式是尾插法
                
        tuple（不可变型）：不支持改变其内部结构的任何操作，其他与list相似
"""























