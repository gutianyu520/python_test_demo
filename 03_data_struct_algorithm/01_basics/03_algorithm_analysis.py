# -*- coding: utf-8 -*-
# @Time    : 2021/2/7 10:05
# @Author  : Lim Yoona
# @Site    : 
# @File    : 03_algorithm_analysis.py
# @Software: PyCharm

""""""
"""
    时间复杂度与大O记法
        大O记法：
            定义：对于一个单调的整数函数f，若存在一个整数函数g和实常数c>0，
                使得充分大的n总有f(n)<=c*g(n)，就可以说函数g是一个渐进函数，
                记为f(n)=O(g(n))，也就是说，在趋向于无穷的极限意义下，函数f
                的增长速度收到函数g的约束，亦即函数f与函数g的特征相似
        
        时间复杂度：
            定义：假设存在函数g，使得算法a处理规模为n的问题示例所用时间T(n)=O(g(n)),
                则称O(g(n))为算法A的渐进时间复杂度，简称时间复杂度，记为T(n)
    
    理解大O记法：
        对于算法的时间性质和空间性质，最重要的是其数量加和趋势，这些是分析算法效率的主要部分。
        计量基本操作数量的规模函数中，常量可以忽略不计，即3n^2与100n^2属于同一量级
    
    最坏时间复杂度（主要关注对象）：
        最坏时间复杂度：算法完成工作最多需要多少基本操作（是完成工作的保证）
        平均时间复杂度：对算法的全面评价
        最优时间复杂度：没有参考价值
        
    基本计算规则：
        1.基本操作：只有常数项，时间复杂度为O(1)
        2.顺序结构：时间复杂度按加法计算
        3.循环结构：时间复杂度按乘法计算
        4.分支结构：时间复杂度取最大值
        5.判断算法效率，往往只需关注操作数量的最高次项，其他次要项和常数项可以忽略
        6.没有特殊说明的情况下，所分析的算法的时间复杂度是指最坏时间复杂度
    
    案例算法分析：
        案例1：
            时间复杂度：T(n) = O(n*n*n) = O(n^3)
        案例2：
            时间复杂度：T(n) = O(n*n(1+1)) = O(n^2)
            
    常见时间复杂度：
        执行次数函数举例 	阶 	        非正式术语
        12 	            O(1) 	    常数阶
        2n+3 	        O(n) 	    线性阶
        3n^2+2n+1 	    O(n2) 	    平方阶
        5log2n+20 	    O(logn) 	对数阶
        2n+3nlog2n+19 	O(nlogn) 	nlogn阶(log2n可简写成logn)
        6n^3+2n^2+3n+4 	O(n3) 	    立方阶
        2^n 	        O(2n) 	    指数阶 
    
    时间复杂度消耗时间关系(由小到大)
        O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n)
"""



