# -*- coding: utf-8 -*-
# @Time    : 2021/2/5 15:16
# @Author  : Lim Yoona
# @Site    : 
# @File    : 02_tcp_connect.py
# @Software: PyCharm

"""
    TCP握手
"""

"""
    三次握手（客户端连接）：
        1.客户端发送创建连接请求，进入阻塞状态
        2.服务器返回确认连接,进入阻塞状态
        3.客户端接收确认连接，发送数据
"""

"""
    四次挥手（客户端关闭）：
        1.客户端发送连接释放报文，进入终止等待1状态
        2.服务器接收连接释放报文，返回确认报文，进入关闭等待状态
        3.客户端接收到确认报文，进入终止等待2状态，等待服务器发送释放报文
        4.服务器发送释放报文
        5.客户端接收释放报文，发送确认
        6.服务器一接收确认，立即关闭，服务器关闭比客户端要早些
        
"""

"""
    11种状态：
        1.CLOSE：初始状态，未连接
        2.LISTEN：服务器监听状态，接收客户端连接
        3.SYN_RCVD：服务器接收到客户端连接请求SYN报文
        4.SYN_SENT：客户端发送完连接请求SYN报文后的状态
        5.ESTBLISHED：TCP连接已创建
        6.FIN_WAIT1：客户端发送完连接释放报文后的状态
        7.FIN_WAIT2：客户端接收到确认报文的状态
        8.TIME_WAIT：客户端接收到释放报文后的状态
        9.CLOSING（例外）：客户端发送完连接释放报文，本来是接收的确认报文，再是释放报文，但是直接收到了释放报文，使得双方都处于正在关闭SOCKET阶段
        10.CLOSE_WAIT：服务器从发送确认报文和释放报文之间的状态
        11.LAST_ACT：服务器发送释放报文到接收客户端确认之间的状态
"""

"""
    2MSL问题：
        1.客户端发送完最终释放确认到关闭锁等待的时间，叫TIME_WAIT
        2.这个等待时间是两倍的MSL，所以又叫2MSL
        3.目的：怕最后一个ACK包对方没收到，那么对方会重新发送第三次挥手的FIN包
        4.但当处于TIME_WAIT状态是不接受任何数据的，直到2MSL结束，但可以通过设置SO_REUSEADDR使得不必等到2MSL结束。
"""

"""
    长连接和短连接
        短连接：
            1.客户端发起连接请求
            2.服务器接受请求，建立按揭
            3.客户端发送消息
            4.服务器回应客户端
            5.完成一次读写，双方都可以发起close操作
        优点：
            对于服务器管理连接较为简单，不需要额外的控制手段
        缺点：
            客户端请求频繁，在TCP的建立和关闭上浪费时间和带宽
        
        长连接：
            1.客户端发起连接
            2.服务器接受请求，建立按揭
            3.客户端发送消息
            4.服务器回应客户端
            5.完成一次读写，连接不关闭
            6.持续读写操作
            7.长时间后，客户端发出关闭请求
        优点：
            省去较多的TCP建立和关闭，减少浪费，节约时间
        缺点：
            随连接客户数不断增加，服务器负担过重，需要关闭一些长期不进行读写操作的连接
            也可以限制客户端的最大连接数
        
"""





